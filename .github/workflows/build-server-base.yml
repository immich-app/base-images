name: Build and Push Server Base Images

on:
  push:
    tags:
      - "*"
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write

jobs:
  pre-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should_run: ${{ steps.found_paths.outputs.server == 'true' ||  steps.should_force.outputs.should_force == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - id: found_paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: |
            server:
              - 'server/**'
            workflow:
              - '.github/workflows/build-server-base.yml'
      - name: Check if we should force jobs to run
        id: should_force
        run: echo "should_force=${{ steps.found_paths.outputs.workflow == 'true' || github.event_name == 'release' || github.ref_name == 'main' }}" >> "$GITHUB_OUTPUT"
  
  build_and_push:
    needs: pre-job
    uses: immich-app/devtools/.github/workflows/multi-runner-build.yml@7c66ef5e95c10c2abe187a478ba51e3021e17b2d
    if: ${{ needs.pre-job.outputs.should_run == 'true' }}
    strategy:
      fail-fast: true
      matrix:
        target: ["dev", "prod"]
    permissions:
      contents: read
      actions: read
      packages: write
    with:
      image: base-server-${{ matrix.target }}
      context: server
      dockerfile: server/Dockerfile

  success-check:
    needs: build_and_push
    permissions: {}
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Any jobs failed?
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
      - name: All jobs passed or skipped
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        # zizmor: ignore[template-injection]
        run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
